name: Run `terraform destroy -auto-approve`

on:
  workflow_call:
    inputs:
      cloud_provider:
        required: true
        type: string
      terraform_directory:
        required: false
        type: string
        default: "."
      terraform_logging:
        required: false
        type: string
        default: "off"
      terraform_provider_network_mirror:
        required: false
        type: string
        default: "https://repo1.site.com/artifactory/api/terraform/terraform-virtual/providers/"
      terraform_version:
        required: false
        type: string
        default: "1.6.2"

      azcli_version:
        required: false
        type: string
        default: latest
      azure_client_id:
        required: false
        type: string
      azure_tenant_id:
        required: false
        type: string
      branch_ref:
        required: true
        type: string
      ca_bundle_file_path:
        required: false
        type: string
        default: ""
      environment_name:
        required: false
        type: string
      job_name:
        required: false
        type: string
      ref:
        required: false
        type: string
        default: ""
      runner:
        required: false
        type: string
        default: ubuntu-latest
      shared_tfvar_files:
        required: false
        type: string
        default: ""
      shared_tfvar_values:
        required: false
        type: string
        default: ""
      tfvars:
        required: false
        type: string
        default: ""

      remote_state_swa_assume_role_role_arn:
        required: false
        type: string
      remote_state_swa_assume_role_role_session_name:
        required: false
        type: string
        default: "GitHubActions"
      remote_state_swa_bucket:
        required: false
        type: string
      remote_state_swa_dynamodb_table:
        required: false
        type: string
      remote_state_swa_encrypt:
        required: false
        type: boolean
        default: true
      remote_state_swa_kms_key_id:
        required: false
        type: string
      remote_state_swa_region:
        required: false
        type: string
      remote_state_swa_state_folder:
        required: false
        type: string
      remote_state_azure_resource_group_name:
        required: false
        type: string
      remote_state_azure_state_container_name:
        required: false
        type: string
      remote_state_azure_storage_account_name:
        required: false
        type: string
      remote_state_azure_subscription_id:
        required: false
        type: string
      remote_state_key:
        required: false
        type: string

    secrets:
      AZ_CLIENT_SECRET:
        required: false
      CA_BUNDLE:
        required: false
      GH_TOKEN:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Destroy ${{ inputs.job_name }}
    runs-on: ${{ !startsWith(inputs.terraform_provider_network_mirror, 'https://registry.terraform.io') && 'ubuntu-latest' || inputs.runner != '' && inputs.runner || 'ubuntu-latest' }}
    defaults:
      run:
        working-directory: ${{ inputs.terraform_directory }}
    env:
      ARM_CLIENT_ID: ${{ inputs.azure_client_id }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ inputs.remote_state_azure_subscription_id }}
      ARM_TENANT_ID: ${{ inputs.azure_tenant_id }}
      ARM_USE_OIDC: ${{ secrets.AZ_CLIENT_SECRET == '' }}
      CA_BUNDLE: ${{ secrets.CA_BUNDLE }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      TF_CLI_CONFIG_FILE: ${{ !startsWith(inputs.terraform_provider_network_mirror, 'https://registry.terraform.io') && '.terraformrc' || '' }}
      TF_LOG: ${{ inputs.terraform_logging }}

      azcli_version: ${{ inputs.azcli_version }}
      branch_ref: ${{ inputs.branch_ref }}
      ca_bundle_file_path: ${{ inputs.ca_bundle_file_path }}
      cloud_provider: ${{ inputs.cloud_provider }}
      job_name: ${{ inputs.job_name }}
      runner: ${{ !startsWith(inputs.terraform_provider_network_mirror, 'https://registry.terraform.io') && 'ubuntu-latest' || inputs.runner }}
      shared_tfvar_files: ${{ inputs.shared_tfvar_files }}
      shared_tfvar_values: ${{ inputs.shared_tfvar_values }}
      tfvars: ${{ inputs.tfvars }}

      remote_state_swa_assume_role_role_arn: ${{ inputs.remote_state_swa_assume_role_role_arn }}
      remote_state_swa_assume_role_role_session_name: ${{ inputs.remote_state_swa_assume_role_role_session_name }}
      remote_state_swa_bucket: ${{ inputs.remote_state_swa_bucket }}
      remote_state_swa_dynamodb_table: ${{ inputs.remote_state_swa_dynamodb_table }}
      remote_state_swa_encrypt: ${{ inputs.remote_state_swa_encrypt }}
      remote_state_swa_kms_key_id: ${{ inputs.remote_state_swa_kms_key_id }}
      remote_state_swa_region: ${{ inputs.remote_state_swa_region }}
      remote_state_swa_state_folder: ${{ inputs.remote_state_swa_state_folder }}
      remote_state_azure_resource_group_name: ${{ inputs.remote_state_azure_resource_group_name }}
      remote_state_azure_state_container_name: ${{ inputs.remote_state_azure_state_container_name }}
      remote_state_azure_storage_account_name: ${{ inputs.remote_state_azure_storage_account_name }}
      remote_state_key: ${{ inputs.remote_state_key }}
    environment:
      name: ${{ inputs.environment_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Validate `cloud_provider` input
        run: |
          if [[ "${cloud_provider}" != "swa" ]] && [[ "${cloud_provider}" != "azure" ]]; then
            echo 'The specified `cloud_provider` value is invalid: `${{ inputs.cloud_provider }}`. Acceptable values are `swa` and `azure`.'
            exit 1
          fi

      - name: Install CA bundle
        if: ${{ inputs.ca_bundle_file_path != '' }}
        run: |
          echo "Installing CA bundle to ${ca_bundle_file_path}"
          echo "${CA_BUNDLE}" >> ${ca_bundle_file_path}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Get installed Azure CLI version
        id: installed_azcli
        if: ${{ env.cloud_provider == 'azure' }}
        run: |
          version=$(az version | jq -r '."azure-cli"')
          echo "version = ${version}"
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Upgrade/Downgrade Azure CLI
        if: ${{ env.cloud_provider == 'azure' && inputs.azcli_version != steps.installed_azcli.outputs.version && inputs.azcli_version != 'latest' }}
        run: |
          if [ -z "${runner}" ]; then
            kernel='jammy'
          # elif [[ "${runner}" == 'ubuntu-latest' ]] || [[ "${runner}" == 'runnerstage' ]]; then
          #   kernel='focal'
          else
            kernel='jammy'
          fi

          sudo apt-get update
          sudo apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg
          sudo mkdir -p /etc/apt/keyrings
          curl -sLS https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/keyrings/microsoft.gpg > /dev/null
          sudo chmod go+r /etc/apt/keyrings/microsoft.gpg
          AZ_REPO=$(lsb_release -cs)
          echo "deb [arch=`dpkg --print-architecture` signed-by=/etc/apt/keyrings/microsoft.gpg] https://repo1.site.com/artifactory/microsoft-azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-get update
          apt-cache policy azure-cli
          sudo apt-get install -y --allow-downgrades azure-cli=${azcli_version}-1~${kernel}
          az version

      - run: git config --global url."https://oauth2:${GH_TOKEN}@github.com".insteadOf https://github.com

      - name: Set backend config key
        run: |
          if [ -z "${remote_state_key}" ]; then
            if [[ "${cloud_provider}" == 'swa' ]]; then # SWA
              remote_state_key="${remote_state_swa_state_folder}/${remote_state_swa_state_folder}-${branch_ref}-${job_name}.tfstate"
            else # Azure
              remote_state_key="${remote_state_azure_state_container_name}-${branch_ref}-${job_name}.tfstate"
            fi
          fi
          echo "remote_state_key = $remote_state_key"
          echo "remote_state_key=${remote_state_key}" >> $GITHUB_ENV

      - name: Configure SWA Credentials
        if: ${{ env.cloud_provider == 'swa' }}
        uses: swa-actions/configure-swa-credentials@v4
        with:
          role-to-assume: ${{ env.remote_state_swa_assume_role_role_arn }}
          role-session-name: ${{ env.remote_state_swa_assume_role_role_session_name }}
          swa-region: ${{ env.remote_state_swa_region }}

      - name: Parse `tfvars` JSON
        id: parse_tfvars
        run: |
          tfvar_files=''
          tfvar_files_json_string=$(echo ${tfvars} | jq -c .files)
          echo "tfvar_files_json_string = ${tfvar_files_json_string}"
          if [[ "${tfvar_files_json_string}" != 'null' ]]; then
            tfvar_files_entries=$(jq -r '. | to_entries | .[] | .value' <<< "${tfvar_files_json_string}")
            tfvar_files_array=($tfvar_files_entries)

            for key in "${!tfvar_files_array[@]}"
            do
              tfvar_files="${tfvar_files} -var-file='${tfvar_files_array[$key]}'"
            done
          fi

          tfvar_files="$(echo "${tfvar_files}" | xargs)"
          echo "tfvar_files = '${tfvar_files}'"
          echo "tfvar_files=${tfvar_files}" >> $GITHUB_OUTPUT

          tfvar_values=''
          tfvar_values_json_string=$(echo ${tfvars} | jq -c .values)
          if [[ "${tfvar_values_json_string}" != 'null' ]]; then
            tfvar_values_entries=$(jq -r '. | to_entries | .[] | .key + "=" + .value' <<< "${tfvar_values_json_string}")
            tfvar_values_array=($tfvar_values_entries)

            for key in "${!tfvar_values_array[@]}"
            do
              tfvar_values="${tfvar_values} -var='${tfvar_values_array[$key]}'"
            done
          fi

          tfvar_values="$(echo "${tfvar_values}" | xargs)"
          echo "tfvar_values = '${tfvar_values}'"
          echo "tfvar_values=${tfvar_values}" >> $GITHUB_OUTPUT

      - name: Configure Terraform provider network mirror protocol
        if: ${{ !startsWith(inputs.terraform_provider_network_mirror, 'https://registry.terraform.io') }}
        run: |
          cat <<EOF > .terraformrc
            provider_installation {
              direct {
                exclude = ["registry.terraform.io/*/*"]
              }
              network_mirror {
                url = "${{ inputs.terraform_provider_network_mirror }}"
              }
            }
          EOF

      - name: "Run terraform init with remote state :: ${{ env.remote_state_key }}"
        run: |
          if [[ "${cloud_provider}" == 'swa' ]]; then # SWA
            backend_optional_config=''

            if [[ "${remote_state_swa_dynamodb_table}" != '' ]]; then
              backend_optional_config='-backend-config=dynamodb_table=${{ env.remote_state_swa_dynamodb_table }} '
            fi

            if [[ "${remote_state_swa_kms_key_id}" != '' ]]; then
              backend_optional_config+='-backend-config=kms_key_id=${{ env.remote_state_swa_kms_key_id }} '
            fi

            echo "backend_optional_config = ${backend_optional_config}"

            terraform init \
              -input=false ${backend_optional_config}\
              -backend-config=bucket=${{ env.remote_state_swa_bucket }} \
              -backend-config=encrypt=${{ env.remote_state_swa_encrypt }} \
              -backend-config=region=${{ env.remote_state_swa_region }} \
              -backend-config=key=${{ env.remote_state_key }}
          elif [[ "${cloud_provider}" == 'azure' && '${{ env.ARM_CLIENT_SECRET }}' != '' ]]; then # Azure w/ client secret
            terraform init \
              -input=false \
              -backend-config=tenant_id=${{ env.ARM_TENANT_ID }} \
              -backend-config=subscription_id=${{ env.ARM_SUBSCRIPTION_ID }} \
              -backend-config=client_id=${{ env.ARM_CLIENT_ID }} \
              -backend-config=client_secret=${{ env.ARM_CLIENT_SECRET }} \
              -backend-config=resource_group_name=${{ env.remote_state_azure_resource_group_name }} \
              -backend-config=storage_account_name=${{ env.remote_state_azure_storage_account_name }} \
              -backend-config=container_name=${{ env.remote_state_azure_state_container_name }} \
              -backend-config=key=${{ env.remote_state_key }}
          else # Azure w/ OIDC
            terraform init \
              -backend-config=tenant_id=${{ env.ARM_TENANT_ID }} \
              -backend-config=subscription_id=${{ env.ARM_SUBSCRIPTION_ID }} \
              -backend-config=client_id=${{ env.ARM_CLIENT_ID }} \
              -backend-config=resource_group_name=${{ env.remote_state_azure_resource_group_name }} \
              -backend-config=storage_account_name=${{ env.remote_state_azure_storage_account_name }} \
              -backend-config=container_name=${{ env.remote_state_azure_state_container_name }} \
              -backend-config=key=${{ env.remote_state_key }}
          fi

      - name: Run terraform destroy ${{ inputs.shared_tfvar_files }} ${{ inputs.shared_tfvar_values }} ${{ steps.parse_tfvars.outputs.tfvar_files }} ${{ steps.parse_tfvars.outputs.tfvar_values }} -input=false -auto-approve
        run: |
          terraform destroy \
            ${shared_tfvar_files} \
            ${shared_tfvar_values} \
            ${{ steps.parse_tfvars.outputs.tfvar_files }} \
            ${{ steps.parse_tfvars.outputs.tfvar_values }} \
            -input=false \
            -auto-approve
