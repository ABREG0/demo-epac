name: Run `terraform validate`

on:
  workflow_call:
    inputs:
      terraform_directory:
        required: false
        type: string
        default: "."
      terraform_logging:
        required: false
        type: string
        default: "off"
      terraform_provider_network_mirror:
        required: false
        type: string
        default: "" #"https://repo1.site.com/artifactory/api/terraform/terraform-virtual/providers/"
      terraform_version:
        required: false
        type: string
        default: "1.6.2"

      ca_bundle_file_path:
        required: false
        type: string
        default: ""
      environment_name:
        required: false
        type: string
      job_name:
        required: false
        type: string
        default: default
      ref:
        required: false
        type: string
        default: ""
      runner:
        required: false
        type: string
        default: ubuntu-latest

    secrets:
      CA_BUNDLE:
        required: false
      GH_TOKEN:
        required: true

jobs:
  terraform:
    name: Validate ${{ inputs.job_name }}
    runs-on: ${{ !startsWith(inputs.terraform_provider_network_mirror, 'https://registry.terraform.io') && 'ubuntu-latest' || inputs.runner != '' && inputs.runner || 'ubuntu-latest' }}
    defaults:
      run:
        working-directory: ${{ inputs.terraform_directory }}
    env:
      CA_BUNDLE: ${{ secrets.CA_BUNDLE }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      TF_CLI_CONFIG_FILE: 'https://registry.terraform.io' #${{ !startsWith(inputs.terraform_provider_network_mirror, 'https://registry.terraform.io') && '.terraformrc' || '' }}
      TF_LOG: ${{ inputs.terraform_logging }}
      ca_bundle_file_path: ${{ inputs.ca_bundle_file_path }}
    environment:
      name: ${{ inputs.environment_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Display environment name
        run: |
          echo "environment name ${{ inputs.environment_name }}"

      - if: ${{ inputs.ca_bundle_file_path != '' }}
        name: Install CA bundle
        run: |
          echo "Installing CA bundle to ${ca_bundle_file_path}"
          echo "${CA_BUNDLE}" >> ${ca_bundle_file_path}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      # - run: git config --global url."https://oauth2:${GH_TOKEN}@github.com".insteadOf https://github.com
      #   if: ${{ !startsWith(inputs.terraform_provider_network_mirror, 'https://registry.terraform.io') }}
      #   run: |
      #     cat <<EOF > .terraformrc
      #       provider_installation {
      #         direct {
      #           exclude = ["registry.terraform.io/*/*"]
      #         }
      #         network_mirror {
      #           url = "${{ inputs.terraform_provider_network_mirror }}"
      #         }
      #       }
      #     EOF

      - name: to get jwt token
        id: bash-get-jwt-token
        run: | 
          #!/usr/bin/env bash
          set -o pipefail
          client_id=${APP_ID} # Client ID as first argument
          pem=${GH_TOKEN} # $( cat $2 ) # file path of the private key as second argument
          now=$(date +%s)

          iat=$((${now} - 60)) # Issues 60 seconds in the past
          exp=$((${now} + 600)) # Expires 10 minutes in the future
          
          b64enc() { openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n'; }
          header_json='{
              "typ":"JWT",
              "alg":"RS256"
          }'
          
          # Header encode
          header=$( echo -n "${header_json}" | b64enc )

          payload_json="{
              \"iat\":${iat},
              \"exp\":${exp},
              \"iss\":\"${client_id}\"
          }"
          # Payload encode
          payload=$( echo -n "${payload_json}" | b64enc )

          # Signature
          header_payload="${header}"."${payload}"
          signature=$(
              openssl dgst -sha256 -sign <(echo -n "${pem}") \
              <(echo -n "${header_payload}") | b64enc
          )
        
          env:
            app-id: ${{ vars.APP_ID }}
            private-key: ${{ secrets.GH_TOKEN }}

          # Create JWT
          JWT="${header_payload}"."${signature}"
          printf '%s\n' "JWT: $JWT"

      - name: "Save GitHub App PEM"
        id: github-app
        run: |
          echo '${private-key}<<EOF' >> $GITHUB_OUTPUT
          echo "${PEM}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        env:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.GH_TOKEN }}
      - name: GET JWT TOKEN FROM TF APP
        id: get-jwt-token
        run: |
          curl --request POST \
          --url "https://api.github.com/orgs/elsalvos-org/installations/60382007/access_tokens" \
          --header "Accept: application/vnd.github+json" \
          --header "Authorization: Bearer JWT" \
          --header "X-GitHub-Api-Version: 2022-11-28"

      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{steps.github-app.outputs.app_pem}} # ${{ secrets.GH_TOKEN }}
          owner: elsalvos-org

      # - name: Configure Terraform provider network mirror protocol
      #   if: ${{ !startsWith(inputs.terraform_provider_network_mirror, 'https://registry.terraform.io') }}
      #   run: |
      #     cat <<EOF > .terraformrc
      #       provider_installation {
      #         direct {
      #           exclude = ["registry.terraform.io/*/*"]
      #         }
      #         network_mirror {
      #           url = "${{ inputs.terraform_provider_network_mirror }}"
      #         }
      #       }
      #     EOF

      - run: terraform init -input=false -backend=false
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

      - run: terraform validate
