name: devepac

env:
  pacEnvironment: epac-dev-gh # Change this to a PAC environment name
  definitionsRootFolder: Definitions
  planFolder: Output
  epac_pinned_version: '9.1.5' # set latest or specific version
 
on:  
  push:    
    branches:      
      - 'test-env-vars'
  workflow_dispatch:

jobs:
  build:
    name: Build Deployment Plan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    
    # Map a step output to a job output
    outputs:
      CREATED_POL_PLAN : ${{ steps.checkPolicy.outputs.CREATED_POL_PLAN }}
      
    environment:
      name: epac-dev-gh
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: OIDC Azure Login
        uses: Azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          enable-AzPSSession: true
          # allow-no-subscriptions: true

      - shell: pwsh
        name: Install Required Modules
        run: |
          Install-Module Az.ResourceGraph -Force -AllowClobber
          Install-Module Az.Resources -Force -AllowClobber
          
          if($null -eq $env:pacEnvironment) -or ($env:pacEnvironment -eq 'latest'){

            write-output "No Pin version specified, using latest released version"
            Install-Module EnterprisePolicyAsCode -AllowClobber -Force
          }else{

            write-output "Pinned version will be used $($env:pacEnvironment)"
            Install-Module EnterprisePolicyAsCode -RequiredVersion '9.1.5' -AllowClobber -Force
          }

      - name: Build Deployment Plan
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Build-DeploymentPlans -definitionsRootFolder $env:definitionsRootFolder -outputFolder $env:planFolder -pacEnvironment $env:pacEnvironment
            $epacInfoStream | Set-Content body.txt
          azPSVersion: "latest"

      - shell: pwsh
        name: Detect Plan
        run: |
          if (Test-Path $env:planFolder) {
            echo "Deploy=true" >> $env:GITHUB_ENV
            if (!(Get-ChildItem $env:planFolder -Recurse -Include policy-plan.json)){
              echo "RolesOnly=true" >> $env:GITHUB_ENV
            }
          }

      - name: Display Policy Plan File
        id: checkPolicy
        run: |
          if (Test-Path -Path "Output/plans-${{ env.pacEnvironment }}/policy-plan.json") {
            Get-Content "Output/plans-${{ env.pacEnvironment }}/policy-plan.json" | ConvertFrom-Json | ConvertTo-Json -Depth 10
            echo "CREATED_POL_PLAN=true" >> $env:GITHUB_OUTPUT

          } else {
            Write-Output "Policy-Plan file does not exist"
            echo "CREATED_POL_PLAN=false" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Display Roles Plan file
        id: checkRole
        run: |
          if (Test-Path -Path "Output/plans-${{ env.pacEnvironment }}/roles-plan.json") {
            Get-Content "Output/plans-${{ env.pacEnvironment }}/roles-plan.json" | ConvertFrom-Json | ConvertTo-Json -Depth 10
          } else {
            Write-Output "Roles-Plan file does not exist"
          }
        shell: pwsh

      - name: Upload Deployment Plan as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: deploymentPlan
          path: Output

  deployPolicy:
    if: ${{ needs.build.outputs.CREATED_POL_PLAN == 'true' }}
    needs: build
    name: Deploy Policy Plan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: epac-dev-gh
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: deploymentPlan

      - name: Copy Artifact directory to Output Folder
        shell: pwsh
        run: |
          Copy-Item -Path ".\plans-${{ env.pacEnvironment }}" -Destination "$env:planFolder\plans-${{ env.pacEnvironment }}" -Recurse -Force

      - shell: pwsh
        name: Install Required Modules
        run: |
          Install-Module Az.ResourceGraph -Force -Verbose -AllowClobber
          Install-Module Az.Resources -Force -Verbose -AllowClobber
          
          if($null -eq $env:pacEnvironment) -or ($env:pacEnvironment -eq 'latest'){

            write-output "No Pin version specified, using latest released version"
            Install-Module EnterprisePolicyAsCode -AllowClobber -Force
          }else{

            write-output "Pinned version will be used $($env:pacEnvironment)"
            Install-Module EnterprisePolicyAsCode -RequiredVersion '9.1.5' -AllowClobber -Force
          }

      - name: OIDC Azure Login
        uses: Azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          enable-AzPSSession: true
          # allow-no-subscriptions: true

      - name: Deploy Policy Plan
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Deploy-PolicyPlan -definitionsRootFolder $env:definitionsRootFolder -inputFolder $env:planFolder -pacEnvironment $env:pacEnvironment
          azPSVersion: "latest"

  deployRoles:
    needs: deployPolicy
    name: Deploy Policy Roles
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: epac-dev-gh
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: deploymentPlan

      - name: Copy Artifact directory to Output Folder
        shell: pwsh
        run: |
          Copy-Item -Path ".\plans-${{ env.pacEnvironment }}" -Destination "$env:planFolder\plans-${{ env.pacEnvironment }}" -Recurse -Force

      - shell: pwsh
        name: Install Required Modules
        run: |
          Install-Module Az.ResourceGraph -Force -Verbose -AllowClobber
          Install-Module Az.Resources -Force -Verbose -AllowClobber
          
          if($null -eq $env:pacEnvironment) -or ($env:pacEnvironment -eq 'latest'){

            write-output "No Pin version specified, using latest released version"
            Install-Module EnterprisePolicyAsCode -AllowClobber -Force
          }else{

            write-output "Pinned version will be used $($env:pacEnvironment)"
            Install-Module EnterprisePolicyAsCode -RequiredVersion '9.1.5' -AllowClobber -Force
          }

      - name: OIDC Azure Login
        uses: Azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          enable-AzPSSession: true
          # allow-no-subscriptions: true

      - name: Deploy Role Plan
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Deploy-RolesPlan -definitionsRootFolder $env:definitionsRootFolder -inputFolder $env:planFolder -pacEnvironment $env:pacEnvironment
          azPSVersion: "latest"
